       IDENTIFICATION DIVISION.
      ****************************************************************
      *                                                              *
      * Program name: AMQ0PUT4                                       *
      *                                                              *
      * Description: Sample COBOL program that puts messages         *
      *              to a message queue (example using MQPUT)        *
      *                                                              *
      * <START_COPYRIGHT>                                            *
      * Licensed Materials - Property of IBM                         *
      *                                                              *
      * 5724-B41                                                     *
      * (C) Copyright IBM Corp. 1993, 2002 All Rights Reserved.      *
      *                                                              *
      * US Government Users Restricted Rights - Use, duplication or  *
      * disclosure restricted by GSA ADP Schedule Contract with      *
      * IBM Corp.                                                    *
      * <END_COPYRIGHT>                                              *
      *                                                              *
      ****************************************************************
      *                                                              *
      * Function:                                                    *
      *                                                              *
      *                                                              *
      *   AMQ0PUT4 is a sample COBOL program to put messages on      *
      *   a message queue, and is an example of the use of MQPUT     *
      *                                                              *
      *      -- sample message input is read using the ACCEPT        *
      *         verb, with a blank entry indicating the end of       *
      *         input; the program parameter identifies the          *
      *         target queue                                         *
      *         (So if this sample is run in an interactive job,     *
      *         lines would be read from the terminal)               *
      *                                                              *
      *      -- puts each text line in the input to the message      *
      *         queue, taking each line of text as the content       *
      *         of a datagram (the default type) message             *
      *                                                              *
      *      -- writes a message for each MQI reason other than      *
      *         MQRC-NONE; stops if there is a MQI completion        *
      *         code of MQCC-FAILED                                  *
      *                                                              *
      *    Program logic:                                            *
      *         MQCONN to the target queue manager                   *
      *         MQOPEN target queue for OUTPUT                       *
      *         while no MQI failures,                               *
      *         .  ACCEPT line of text                               *
      *         .  MQPUT message with text to target queue           *
      *         MQCLOSE target queue                                 *
      *         MQDISC from queue manager                            *
      *                                                              *
      ****************************************************************
      *                                                              *
      *                                                              *
      *                                                              *
      *   Exceptions signaled:  none                                 *
      *   Exceptions monitored: none                                 *
      *                                                              *
      *   AMQ0PUT4 has 2 parameters - (1) name of the target queue   *
      *                               (2) name of the queue manager  *
      *                                                              *
      ****************************************************************
       PROGRAM-ID. AMQ0PUT4.

      ****************************************************************
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *
      **  Declare MQI structures needed
      * MQI named constants
       01 MY-MQ-CONSTANTS.
          COPY CMQV.
      * Object Descriptor
       01 OBJECT-DESCRIPTOR.
          COPY CMQODV.
      * Message Descriptor
       01 MESSAGE-DESCRIPTOR.
          COPY CMQMDV.
      * Put message options
       01 PMOPTIONS.
          COPY CMQPMOV.
      ** note, sample uses defaults where it can
       01 HCONN                      PIC S9(9) BINARY.
       01 Q-HANDLE                   PIC S9(9) BINARY.
       01 OPTIONS                    PIC S9(9) BINARY.
       01 COMPLETION-CODE            PIC S9(9) BINARY.
       01 OPEN-CODE                  PIC S9(9) BINARY.
       01 REASON                     PIC S9(9) BINARY.
       01 BUFFER                     PIC X(60).
       01 BUFFER-LENGTH              PIC S9(9) BINARY.
       LINKAGE SECTION.
       01 TARGET-QUEUE               PIC X(48).
       01 QUEUE-MANAGER              PIC X(48).

      ****************************************************************
       PROCEDURE DIVISION USING TARGET-QUEUE, QUEUE-MANAGER.
       P0.
      ** indicate that sample program has started
           DISPLAY "AMQ0PUT4 start".
      *
      ****************************************************************
      *                                                              *
      *    use parameters as the name of the target queue            *
      *                              and the queue manager           *
      *                                                              *
      ****************************************************************
           DISPLAY "target queue is " TARGET-QUEUE.
           DISPLAY "queue manager is " QUEUE-MANAGER.
      *
      ****************************************************************
      *                                                              *
      *   Connect to the queue manager                               *
      *                                                              *
      ****************************************************************
           CALL "MQCONN"
            USING QUEUE-MANAGER, HCONN,
            COMPLETION-CODE, REASON.

      *      report reason and stop if it failed
           IF COMPLETION-CODE IS EQUAL TO MQCC-FAILED
             DISPLAY "MQCONN ended with reason code " REASON
             STOP RUN
             END-IF.
      *
      ****************************************************************
      *                                                              *
      *   Open the target message queue for output (and fail if      *
      *   MQM is quiescing)                                          *
      *                                                              *
      ****************************************************************
       OPENS.
           MOVE TARGET-QUEUE TO MQOD-OBJECTNAME.
           ADD MQOO-OUTPUT MQOO-FAIL-IF-QUIESCING
                     GIVING OPTIONS.
           CALL "MQOPEN"
            USING HCONN, OBJECT-DESCRIPTOR,
            OPTIONS, Q-HANDLE,
            OPEN-CODE, REASON.

      *      report reason, if any; stop if failed
           IF REASON IS NOT EQUAL TO MQRC-NONE
             DISPLAY "MQOPEN ended with reason code " REASON
             END-IF.

           IF OPEN-CODE IS EQUAL TO MQCC-FAILED
             DISPLAY "unable to open server queue for output"
             STOP RUN
             END-IF.

      ****************************************************************
      *                                                              *
      *   Put request messages to the server queue                   *
      *                                                              *
      ****************************************************************
       PUTS.
           MOVE OPEN-CODE TO COMPLETION-CODE.
           PERFORM PUTR WITH TEST BEFORE
             UNTIL COMPLETION-CODE IS EQUAL TO MQCC-FAILED.

      ****************************************************************
      *                                                              *
      *   Close the target queue                                     *
      *                                                              *
      ****************************************************************
       CLOSES.
           MOVE MQCO-NONE TO OPTIONS.
           CALL "MQCLOSE"
            USING HCONN, Q-HANDLE, OPTIONS,
            COMPLETION-CODE, REASON.

      *      report reason, if any
           IF REASON IS NOT EQUAL TO MQRC-NONE
             DISPLAY "MQCLOSE ended with reason code " REASON
             END-IF.

      ****************************************************************
      *                                                              *
      *   Disconnect from MQM (if not previously connected)          *
      *                                                              *
      ****************************************************************
       DISCS.
           CALL "MQDISC"
            USING HCONN, COMPLETION-CODE, REASON.

      *      report reason, if any
            IF REASON IS NOT EQUAL TO MQRC-NONE
              DISPLAY "MQDISC ended with reason code " REASON
             END-IF.

       OVER.
      ** indicate that sample program has finished
           DISPLAY "AMQ0PUT4 end".
           STOP RUN.

      ****************************************************************
      *                                                              *
      *   Put one request to the target queue                        *
      *                                                              *
      ****************************************************************
       PUTR.
           MOVE SPACES TO BUFFER.
           ACCEPT BUFFER.
           IF BUFFER IS NOT EQUAL TO SPACES
             PERFORM PUTIT
           ELSE
             MOVE MQCC-FAILED TO COMPLETION-CODE.

       PUTIT.
           MOVE 60 to BUFFER-LENGTH.
      * Set format to string so that the msg can be converted
           MOVE MQFMT-STRING to MQMD-FORMAT
           CALL "MQPUT"
            USING HCONN, Q-HANDLE,
            MESSAGE-DESCRIPTOR, PMOPTIONS,
            BUFFER-LENGTH, BUFFER,
            COMPLETION-CODE, REASON.

      *      report reason, if any
           IF REASON IS NOT EQUAL TO MQRC-NONE
             DISPLAY "MQPUT ended with reason code " REASON
             END-IF.

      ****************************************************************
      *                                                              *
      * END OF AMQ0PUT4                                              *
      *                                                              *
      ****************************************************************
